name: Deploy to Azure App Service (Container)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  NODE_VERSION: '18.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      AZURE_ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preflight â€“ required secrets
        shell: bash
        run: |
          required=(AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_RESOURCE_GROUP AZURE_WEBAPP_NAME REGISTRY_LOGIN_SERVER REGISTRY_USERNAME REGISTRY_PASSWORD AZURE_ACR_NAME)
          for n in "${required[@]}"; do
            if [ -z "${!n}" ]; then
              echo "::error::Missing $n" && exit 1
            fi
          done

      - name: Azure login (OIDC)
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          environment: AzureCloud
          allow-no-subscriptions: true

      - name: Set default subscription
        run: |
          az account set --subscription "$AZURE_SUBSCRIPTION_ID"
          az account show -o table

      - name: Validate tenant and subscription
        shell: bash
        run: |
          TENANT=$(az account show --query tenantId -o tsv || true)
          SUB=$(az account show --query id -o tsv || true)
          echo "Logged tenant=$TENANT, expected=${AZURE_TENANT_ID}"
          echo "Logged subscription=$SUB, expected=${AZURE_SUBSCRIPTION_ID}"
          if [ "$TENANT" != "$AZURE_TENANT_ID" ]; then echo "::error::Tenant mismatch (not Kibycom)"; exit 1; fi
          if [ "$SUB" != "$AZURE_SUBSCRIPTION_ID" ]; then echo "::error::Subscription mismatch"; exit 1; fi

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: Show workspace layout
        run: |
          echo "PWD=$(pwd)"
          ls -la
          echo "-- client --" && ls -la client || true
          echo "-- server --" && ls -la server || true

      - name: Verify lockfile (client)
        continue-on-error: true
        working-directory: ./client
        run: |
          echo "PWD=$(pwd)" && ls -la
          if [ -f package-lock.json ]; then echo "Found client/package-lock.json"; else echo "::warning::client/package-lock.json missing"; fi
      - name: Install dependencies (client)
        working-directory: ./client
        run: |
          npm ci || npm install --no-audit --no-fund
      - name: Verify lockfile (server)
        continue-on-error: true
        working-directory: ./server
        run: |
          echo "PWD=$(pwd)" && ls -la
          if [ -f package-lock.json ]; then echo "Found server/package-lock.json"; else echo "::warning::server/package-lock.json missing"; fi
      - name: Install dependencies (server)
        working-directory: ./server
        run: |
          npm ci || npm install --no-audit --no-fund

      - name: Build application
        run: |
          cd client && npm run build
          cd ../server && npm run build
        env:
          CI: false

      - name: Compute image repo (lowercase)
        id: compute_repo
        shell: bash
        run: |
          IMAGE_REPO="${AZURE_WEBAPP_NAME,,}"
          echo "IMAGE_REPO=$IMAGE_REPO" >> "$GITHUB_ENV"
          echo "image_repo=$IMAGE_REPO" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        env:
          IMAGE_REPO: ${{ steps.compute_repo.outputs.image_repo }}
        run: |
          docker build -t "$IMAGE_REPO:${{ github.sha }}" .
          docker tag "$IMAGE_REPO:${{ github.sha }}" "$IMAGE_REPO:latest"

      - name: ACR login (OIDC)
        shell: bash
        run: |
          if [ -z "$AZURE_ACR_NAME" ]; then echo "::error::AZURE_ACR_NAME is not set"; exit 1; fi
          az acr login --name "$AZURE_ACR_NAME"

      - name: Push Docker image
        env:
          IMAGE_REPO: ${{ steps.compute_repo.outputs.image_repo }}
        run: |
          docker tag "$IMAGE_REPO:${{ github.sha }}" "$REGISTRY_LOGIN_SERVER/$IMAGE_REPO:${{ github.sha }}"
          docker tag "$IMAGE_REPO:latest" "$REGISTRY_LOGIN_SERVER/$IMAGE_REPO:latest"
          docker push "$REGISTRY_LOGIN_SERVER/$IMAGE_REPO:${{ github.sha }}"
          docker push "$REGISTRY_LOGIN_SERVER/$IMAGE_REPO:latest"

      - name: Verify image exists in ACR
        shell: bash
        run: |
          if [ -z "$AZURE_ACR_NAME" ]; then echo "::error::AZURE_ACR_NAME is not set"; exit 1; fi
          echo "Checking repository '${{ steps.compute_repo.outputs.image_repo }}' in ACR '$AZURE_ACR_NAME'"
          az acr repository show-tags -n "$AZURE_ACR_NAME" --repository "${{ steps.compute_repo.outputs.image_repo }}" -o table || true

      - name: Ensure App Service container port setting
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --settings WEBSITES_PORT=8080

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ steps.compute_repo.outputs.image_repo }}:${{ github.sha }}